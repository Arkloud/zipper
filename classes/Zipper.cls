public class Zipper 
{

    //public static String bigZip
    public static String bigZip
    
    private Map<String,fileObject> zipFileMap = new Map<String, fileObject>{};
    private Boolean unZipping = false;  //if zipping a file, false.  If UnZipping a file, true
    protected String zipFileString;  // stores the Hex version of the file blob
    
    // Zipper Zip  Contructor
    public Zipper(){}
   
    //  Zipper UnZipping Constructor
    public Zipper(Blob fileData)
    {   
        unZipping = true;
        zipFileString = EncodingUtil.convertToHex(fileData);
        Integer offsetOfEndCentralDirSignature = zipFileString.lastIndexOf(endCentralDirSignature);
        Long numberOfFiles = HexUtil.hexToIntLittleEndian(zipFileString.substring(offsetOfEndCentralDirSignature+10*2,offsetOfEndCentralDirSignature+10*2+2*2));    //offset 10, 2 bytes
        Long startOfCentralDir = HexUtil.hexToIntLittleEndian(zipFileString.substring(offsetOfEndCentralDirSignature+16*2,offsetOfEndCentralDirSignature+16*2+4*2));  //offset 16, 4 bytes
    
        //System.debug (numberOfFiles + ',  ' + startOfCentralDir);
        Integer offset = (Integer)startOfCentralDir;
        
        for (Integer fileLoop = 0; fileLoop < numberOfFiles; fileLoop++)
        {
            fileObject tempFile = new fileObject(zipfileString, offset);
            zipFileMap.put(EncodingUtil.convertFromHex(tempFile.fileName).toString(), tempFile);
            offset = tempFile.offsetToNextRecord;
    
        }
        //System.debug(zipFileMap.keySet());
    }
    
    
    // returns the list of file names generated by Zipper class
    public Set<String> getFileNames()
    {
        return zipFileMap.keySet();
    }
    
    public Blob getFile(String fileName)
    {
        fileObject tempFileObject =  zipFileMap.get(fileName);
        tempFileObject.readLocalFileHeader(zipFileString, (Integer)HexUtil.hexToIntLittleEndian( tempFileObject.offsetOfLH));
        if (tempFileObject.compressionMethod == '0000')
        {
            return EncodingUtil.convertFromHex(tempFileObject.compressedFileData);
        }
        else {
            System.assert(false,'Unsupported compression method: ' + tempFileObject.compressionMethod);
            return null;
        }
    }
    
    
    // Local File Header
    final static String LFHSignature = '504b0304';      
    
    
    // Central Directory 
    final static String CFHSignature = '504b0102';  // little Endian Central file header signature
    
    
    // End of Central Directory records
    final String endCentralDirSignature ='504b0506'; //Little Endian formatted signature (4 bytes)
    final String numberOfThisDisk = '0000'; // (2 bytes)
    final String numberOfTheDiskWithStartCentralDir = '0000'; //(2 bytes)
    private String totalNumberOfEntriesInTheCentralDirOnThisDisk =  '0000' ;//(2 bytes)
    private String totalNumberOfEntriesCentralDir  = '0000'; //(2 bytes)
    private String sizeOfCentralDir  = '00000000'; //(4 bytes)
    private String offsetOfStartOfCentralDir = '00000000'; //(4 bytes)
    final String zipfileCommentLength = '0000';  //(this is c), (2 bytes)
    final String zipfileComment = '00'; // (c bytes)
    
    
    private String assembleEndOfCentralDir ()
    {
        return endCentralDirSignature + numberOfThisDisk + numberOfTheDiskWithStartCentralDir + totalNumberOfEntriesInTheCentralDirOnThisDisk +
            totalNumberOfEntriesCentralDir  + sizeOfCentralDir + offsetOfStartOfCentralDir +
            zipfileCommentLength + zipfileComment;
    }
    
    
    public Blob getZipFile ()
    {
        if (unZipping)
        {
            return EncodingUtil.convertFromHex(zipFileString);
        }
        String zipFileBuffer ='';
        Integer zipFileSize = 0;
        for (fileObject tempFileObject : zipFileMap.values())
        {
            tempFileObject.OffsetOfLH = returnLEHexStringOfDecimal(zipfileSize, 4);
            zipFileBuffer += tempFileObject.assembleLocalFileHeader();
            zipfileSize = zipFileBuffer.length()/2;
            tempFileObject.compressedFileData = null;
        }
        offsetOfStartOfCentralDir = returnLEHexStringOfDecimal(zipfileSize,4);
        for (fileObject tempFileObject : zipFileMap.values())
        {
            zipFileBuffer += tempFileObject.assembleCentralFileHeader();
        }
        sizeOfCentralDir = returnLEHexStringOfDecimal(zipFileBuffer.length()/2 - zipfileSize,4);
        totalNumberOfEntriesInTheCentralDirOnThisDisk = returnLEHexStringOfDecimal(zipFileMap.size(),2);
        totalNumberOfEntriesCentralDir = returnLEHexStringOfDecimal(zipFileMap.size(),2);
        
        zipFileBuffer += assembleEndOfCentralDir();
        
        zipFileMap.clear();

        //System.debug(zipFileBuffer);
        return EncodingUtil.convertFromHex(zipFileBuffer);
    }
    
	public void addFileToZip (String fileName, Blob fileData, String crc32)
    {
        fileObject tempFileObject = new fileObject();
        
        tempFileObject.lastModTime = HexUtil.intToHex(getCurrentTime(),2); // (2 bytes) 
        tempFileObject.lastModDate = HexUtil.intToHex(getCurrentDate(),2); // (2 bytes)
        
        //tempFileObject.CRC32 = HexUtil.intToHex(HexUtil.CRC32Table(fileData),4);// (4 bytes) 
        tempFileObject.crc32 = crc32;


        tempFileObject.uncompressedSize = returnLEHexStringOfDecimal(fileData.size(), 4);// (4 bytes) 
        tempFileObject.compressedSize = tempFileObject.uncompressedSize;// (4 bytes), creates (n)
    
        tempFileObject.fileNameLength = returnLEHexStringOfDecimal(fileName.length(), 2);// (2 bytes), creates (f)
    
        //tempFileObject.extraFieldLength = '1C00';// (2 bytes) , creates (e)
        tempFileObject.extraFieldLength = '0000';// (2 bytes) , creates (e)
        tempFileObject.fileCommentLength = '0000';// (2 bytes), creates (c)
        tempFileObject.diskNumStart = '0000';// (2 bytes) 
        tempFileObject.internalFileAtt = '0000';// (2 bytes) //Internal file attributes
        tempFileObject.externalFileAtt = '0000A481';// (4 bytes) //External file attributes
    
        tempFileObject.fileName = EncodingUtil.convertToHex(Blob.valueOf(fileName));// (f bytes) // from the parameters passed
    
    
        // tempFileObject.extraField = '5554090003CD16C3544017C35475780B000104F60100000414000000';// (e bytes) 
        tempFileObject.extraField = '';
        // tempFileObject.fileComment = '00';// (c bytes) 
        tempFileObject.fileComment = '';// (c bytes) 
    
        tempFileObject.compressedFileData = EncodingUtil.convertToHex(fileData); // (n bytes) // from the parameters passed
        
        zipFileMap.put(fileName, tempFileObject);  //add the new subFile to the Zip List
    }
    
    public String returnLEHexStringOfDecimal (Integer decimalNumber, Integer sizeInBytes)
    {
        String LEHexStringOfDecimal = '';
        Integer remainder = 0;
        Integer byteLocation = 0;
        String tempRightDigit ='0';
        String tempLeftDigit ='0';
        while (decimalnumber > 0)
        {
            remainder = math.mod(decimalnumber, 16);
            decimalnumber = decimalnumber / 16;
            if (remainder == 1) tempRightDigit = '1';
            if (remainder == 2) tempRightDigit = '2';
            if (remainder == 3) tempRightDigit = '3';
            if (remainder == 4) tempRightDigit = '4';
            if (remainder == 5) tempRightDigit = '5';
            if (remainder == 6) tempRightDigit = '6';
            if (remainder == 7) tempRightDigit = '7';
            if (remainder == 8) tempRightDigit = '8';
            if (remainder == 9) tempRightDigit = '9';
            if (remainder == 10) tempRightDigit = 'A';
            if (remainder == 11) tempRightDigit = 'B';
            if (remainder == 12) tempRightDigit = 'C';
            if (remainder == 13) tempRightDigit = 'D';
            if (remainder == 14) tempRightDigit = 'E';
            if (remainder == 15) tempRightDigit = 'F';
            
            if (remainder == 0)  tempRightDigit = '0';
                    remainder = math.mod(decimalnumber, 16);
                    decimalnumber = decimalnumber / 16;
                        if (remainder == 0) tempLeftDigit = '0';
                        if (remainder == 1) tempLeftDigit = '1';
                        if (remainder == 2) tempLeftDigit = '2';
                        if (remainder == 3) tempLeftDigit = '3';
                        if (remainder == 4) tempLeftDigit = '4';
                        if (remainder == 5) tempLeftDigit = '5';
                        if (remainder == 6) tempLeftDigit = '6';
                        if (remainder == 7) tempLeftDigit = '7';
                        if (remainder == 8) tempLeftDigit = '8';
                        if (remainder == 9) tempLeftDigit = '9';
                        if (remainder == 10) tempLeftDigit = 'A';
                        if (remainder == 11) tempLeftDigit = 'B';
                        if (remainder == 12) tempLeftDigit = 'C';
                        if (remainder == 13) tempLeftDigit = 'D';
                        if (remainder == 14) tempLeftDigit = 'E';
                        if (remainder == 15) tempLeftDigit = 'F';
             
             LEHexStringOfDecimal = LEHEXStringOfDecimal + tempLeftDigit + tempRightDigit;
             byteLocation++;
        }
        for (Integer x = byteLocation; x < sizeInBytes; x++)
            LEHexStringOfDecimal = LEHexStringOfDecimal + '00';
        
        return LEHexStringOfDecimal;
    }
    

    public void removePrefix(String prefix)
    {
        String newDataStr, oldDataStr, fileName, extraField, oldCentralDirStr, newCentralDirStr;
        Integer fileNameLength, extraFieldLength;
        prefix = EncodingUtil.convertToHex(Blob.valueOf(prefix));
        for (fileObject tempFO : zipFileMap.values())
        {
            fileName = tempFO.fileName;
            extraField = tempFO.extraField;
            oldDataStr = tempFO.fileNameLength + tempFO.extraFieldLength + fileName + extraField;
 
            fileNameLength = (Integer)HexUtil.hexToIntLittleEndian(tempFO.fileNameLength) - prefix.length()/2;
            extraFieldLength = (Integer)HexUtil.hexToIntLittleEndian(tempFO.extraFieldLength) + prefix.length()/2;
            newDataStr = hexUtil.intToHex(fileNameLength,2) + hexUtil.intToHex(extraFieldLength,2);
            newDataStr += fileName.removeStart(prefix) + extraField + hexUtil.intToHex(0,prefix.length()/2);

            oldCentralDirStr = tempFO.fileNameLength + tempFO.extraFieldLength + tempFO.fileCommentLength + 
                tempFO.diskNumStart + tempFO.internalFileAtt + tempFO.externalFileAtt + tempFO.offsetOfLH + 
                tempFO.fileName + tempFO.extraField;

            newCentralDirStr = hexUtil.intToHex(fileNameLength,2) + hexUtil.intToHex(extraFieldLength,2) + 
                tempFO.fileCommentLength +    tempFo.diskNumStart + tempFO.internalFileAtt + 
                tempFO.externalFileAtt + tempFO.offsetOfLH + 
                fileName.removeStart(prefix) + extraField + hexUtil.intToHex(0,prefix.length()/2);

            if(fileName.startsWith(prefix))
            {
                zipFileString = zipFileString.replace(oldDataStr,newDataStr);
                zipFileString = zipFileString.replace(oldCentralDirStr, newCentralDirStr);
                //System.debug(oldDataStr);
                //System.debug(newDataStr);

            }
        }

    }


    public static Integer getCurrentTime()
    {
        Datetime d = Datetime.now();
        Integer zipTimeStamp = d.hour();
        zipTimeStamp <<= 6;
        zipTimeStamp |= d.minute();
        zipTimeStamp <<= 5;
        zipTimeStamp |= d.second() / 2;
        
        return zipTimeStamp;
    }
    
    
    
    public static Integer getCurrentDate()
    {
        Datetime d = Datetime.now();
        Integer zipDateStamp = d.year() - 1980;
        zipDateStamp <<= 4;
        zipDateStamp |= d.month();
        zipDateStamp <<= 5;
        zipDateStamp |= d.day();
    
        return zipDateStamp;
    }

    public class fileObject
    {
    // note all strings are hex representations in little endian format
        
        public String creatorVersion = '0A00'; // (2 bytes) likely Windows NT
        public String minExtractorVersion = '0A00'; // (2 bytes) likely Windows NT
        public String gPFlagBit = '0000';  // (2 bytes) general purpose flag bit
        public String compressionMethod = '0000'; // (2 bytes) no compression
        public String lastModTime = '0000';// (2 bytes) 
        public String lastModDate = '0000';// (2 bytes) 
        public String crc32 = null;// (4 bytes) 
        public String compressedSize = '01000000';// (4 bytes), creates (n)
        public String uncompressedSize = '00000000';// (4 bytes) 
        public String fileNameLength = '01000000';// (2 bytes), creates (f)
        public String extraFieldLength = '0000';// (2 bytes) , creates (e)
        public String fileCommentLength = '0000';// (2 bytes), creates (c)
        public String diskNumStart = '0000';// (2 bytes) 
        public String internalFileAtt = '0000';// (2 bytes) 
        public String externalFileAtt = '00000000';// (4 bytes) 
        public String offsetOfLH = '00000000';// (4 bytes) 
        public String fileName = '00';// (f bytes) 
        public String extraField = '00';// (e bytes) 
        public String fileComment = '00';// (c bytes) 
        public String compressedFileData = '00';// (n bytes)
        public Integer offsetToNextRecord = 0;  //offsetToNext Record
    
    
        // Constructor
        public fileObject(){}

        public fileObject (String zipFileString, Integer offset)
        {
        offset *=2;
        creatorVersion = zipFileString.substring(offset+4*2, offset+4*2 + 2*2); // (2 bytes) likely Windows NT  Offset 4
        minExtractorVersion = zipFileString.substring(offset+6*2, offset+6*2 + 2*2); // (2 bytes) likely Windows NT  Offset 6
        GPFlagBit = zipFileString.substring(offset+8*2, offset+8*2 + 2*2);  // (2 bytes) general purpose flag bit  Offset 8
        compressionMethod = zipFileString.substring(offset+10*2, offset+10*2 + 2*2); // (2 bytes) no compression  Offset 10
        lastModTime = zipFileString.substring(offset+12*2, offset+12*2 + 2*2);// (2 bytes)   Offset 12
        lastModDate = zipFileString.substring(offset+14*2, offset+14*2 + 2*2);// (2 bytes)    Offset 14
        CRC32 = zipFileString.substring(offset+16*2, offset+16*2 + 4*2);// (4 bytes)      Offset 16
        compressedSize = zipFileString.substring(offset+20*2, offset+20*2 + 4*2);// (4 bytes), creates (n)     Offset 20
        uncompressedSize = zipFileString.substring(offset+24*2, offset+24*2 + 4*2);// (4 bytes)      Offset 24
        fileNameLength = zipFileString.substring(offset+28*2, offset+28*2 + 2*2);// (2 bytes), creates (f)     Offset 28
        extraFieldLength = zipFileString.substring(offset+30*2, offset+30*2 + 2*2);// (2 bytes) , creates (e)     Offset 30
        fileCommentLength = zipFileString.substring(offset+32*2, offset+32*2 + 2*2);// (2 bytes), creates (c)     Offset 32
        diskNumStart = zipFileString.substring(offset+34*2, offset+34*2 + 2*2);// (2 bytes)     Offset 34
        internalFileAtt = zipFileString.substring(offset+36*2, offset+36*2 + 2*2);// (2 bytes)      Offset 36
        externalFileAtt = zipFileString.substring(offset+38*2, offset+38*2 + 4*2);// (4 bytes)     Offset 38
        OffsetOfLH = zipFileString.substring(offset+42*2, offset+42*2 + 4*2);// (4 bytes)     Offset 42
        offset = offset /2;
        Integer theStart = offset+46;
        Integer theEnd = theStart + (Integer)HexUtil.hexToIntLittleEndian(fileNameLength);
        fileName = zipFileString.substring(theStart*2, theEnd*2);// (f bytes)       Offset 46
        theStart = theEnd;
        theEnd = theStart + (Integer)HexUtil.hexToIntLittleEndian(extraFieldLength);
        extraField = zipFileString.substring(theStart*2, theEnd * 2);// (e bytes)        Offset 46 + fileNameLength
        theStart = theEnd;
        theEnd = theStart + (Integer)HexUtil.hexToIntLittleEndian(fileCommentLength);
        fileComment = zipFileString.substring(theStart*2, theEnd*2);// (c bytes)        Offset 46 + fileNameLength + extraFieldLength
        offsetToNextRecord = theEnd;
        //System.debug(this);
        }
        
        
        public void readLocalFileHeader (String zipFileString, Integer offset)
        {
            offset *=2;
            minExtractorVersion = zipFileString.substring(offset+4*2, offset+4*2 + 2*2); // (2 bytes) likely Windows NT  Offset 4
            GPFlagBit = zipFileString.substring(offset+8*2, offset+6*2 + 2*2);  // (2 bytes) general purpose flag bit  Offset 6
            compressionMethod = zipFileString.substring(offset+8*2, offset+8*2 + 2*2); // (2 bytes) no compression  Offset 8
            lastModTime = zipFileString.substring(offset+10*2, offset+10*2 + 2*2);// (2 bytes)   Offset 10
            lastModDate = zipFileString.substring(offset+12*2, offset+12*2 + 2*2);// (2 bytes)    Offset 12
            CRC32 = zipFileString.substring(offset+14*2, offset+14*2 + 4*2);// (4 bytes)      Offset 14
            compressedSize = zipFileString.substring(offset+18*2, offset+18*2 + 4*2);// (4 bytes), creates (n)     Offset 18
            uncompressedSize = zipFileString.substring(offset+22*2, offset+22*2 + 4*2);// (4 bytes)      Offset 22
            fileNameLength = zipFileString.substring(offset+26*2, offset+26*2 + 2*2);// (2 bytes), creates (f)     Offset 26
            extraFieldLength = zipFileString.substring(offset+28*2, offset+28*2 + 2*2);// (2 bytes) , creates (e)     Offset 28
       
       
            offset = offset /2;
            Integer theStart = offset+30;
            Integer theEnd = theStart + (Integer)HexUtil.hexToIntLittleEndian(fileNameLength);
            fileName = zipFileString.substring(theStart*2, theEnd*2);// (f bytes)       Offset 30
            theStart = theEnd;
            theEnd = theStart + (Integer)HexUtil.hexToIntLittleEndian(extraFieldLength);
            extraField = zipFileString.substring(theStart*2, theEnd * 2);// (e bytes)        Offset 30 + fileNameLength
            theStart = theEnd;
            theEnd = theStart + (Integer)HexUtil.hexToIntLittleEndian(compressedSize);
            compressedFileData = zipFileString.substring(theStart*2, theEnd*2);// (c bytes)        Offset 30 + fileNameLength + extraFieldLength
            offsetToNextRecord = theEnd;
            
            System.debug('local file header ' + this);
        
        }

        public String assembleLocalFileHeader()
        {
		    if (String.isBlank(crc32)) {  
		        crc32 = HexUtil.intToHex(HexUtil.CRC32Table(compressedFileData), 4);// (4 bytes) 
		    }
            return Zipper.LFHSignature + minExtractorVersion + GPFlagBit + compressionMethod +lastModTime + lastModDate + 
                    crc32 + compressedSize + uncompressedSize + fileNameLength + extraFieldLength + fileName + extraField +
                    compressedFileData;
        }

        public String assembleCentralFileHeader()
        {
		    if (String.isBlank(crc32)) {  
		        crc32 = HexUtil.intToHex(HexUtil.CRC32Table(compressedFileData), 4);// (4 bytes) 
		    }
            return Zipper.CFHSignature + creatorVersion + minExtractorVersion + GPFlagBit + compressionMethod +lastModTime + lastModDate
                    + crc32 + compressedSize + uncompressedSize + fileNameLength + extraFieldLength
                    + fileCommentLength + diskNumStart + internalFileAtt + externalFileAtt + offsetOfLH + fileName 
                    + extraField + fileComment;
        }
    }// end of fileObject class
}